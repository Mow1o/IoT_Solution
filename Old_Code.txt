
/*

printf("\nConnecting wifi..\n");

  int ret = esp.connect(MBED_CONF_APP_WIFI_SSID, MBED_CONF_APP_WIFI_PASSWORD,NSAPI_SECURITY_WPA_WPA2);
  if (ret != 0) {
    printf("\nConnection error\n");
    LedWhite = 1;
    ThisThread::sleep_for(1000ms);
    LedWhite = 0;
    connected = false;
  } else {
    printf("\nConnection success\n");
    connected = true;
    LedGreen = 1;
    ThisThread::sleep_for(1000ms);
    LedGreen = 0;
    int getip = esp.get_ip_address(&deviceIP);
    if (getip == NULL){
        printf("IP retrieval Error");
    }
    printf("IP via DHCP: %s\n", deviceIP.get_ip_address());
  }

    MQTTClient client(&socket);

  nsapi_error_t result = esp.gethostbyname(MBED_CONF_APP_MQTT_BROKER_HOSTNAME,&MQTTBroker, NSAPI_IPv4, "esp");
  if (result != NSAPI_ERROR_OK) {
    printf("Failed to get MQTT broker IP address (error code %d)\n", result);
    LedWhite = 1;
    ThisThread::sleep_for(1000ms);
    LedWhite = 0;
  } else {
    printf("MQTT broker IP achieved\n");
    LedGreen = 1;
    ThisThread::sleep_for(1000ms);
    ledYellow = 0;
  }

  bool connected = false;
  char buffer[64];
  int i = 0;
  

  //sprintf(buffer, "lähteekö tämä sanoma?");


  
  // esp->get_ip_address(&deviceIP);

  MQTTBroker.set_port(MBED_CONF_APP_MQTT_BROKER_PORT);

  // Connect to MQTT broker
  MQTTPacket_connectData data = MQTTPacket_connectData_initializer;
  data.MQTTVersion = 3;
  char *id = MBED_CONF_APP_MQTT_ID;
  data.clientID.cstring = id;

  MQTT::Message message;
  message.qos = MQTT::QOS0;
  message.retained = false;
  message.dup = false;
  message.payload = (void*)buffer;
  message.payloadlen = 64;


  
  result = socket.open(&esp);
  if (result != NSAPI_ERROR_OK) {
    printf("Failed to open socket (error code %d)\n", result);
    LedWhite = 1;
    ThisThread::sleep_for(1000ms);
    LedWhite = 0;
  } else {
    printf("Socket is open\n");
    ledYellow = 1;
    ThisThread::sleep_for(1000ms);
    ledYellow = 0;
  }
  ThisThread::sleep_for(100ms);
  result = socket.connect(MQTTBroker);
  if (result != NSAPI_ERROR_OK) {
    printf("Failed to connect to MQTT broker (error code %d)\n", result);
    LedWhite = 1;
    ThisThread::sleep_for(1000ms);
    LedWhite = 0;
  } else {
    printf("Connected to the MQTT broker\n");
    ledYellow = 1;
    ThisThread::sleep_for(1000ms);
    ledYellow = 0;
  }
  ThisThread::sleep_for(100ms);
  result = client.connect(data);
  if (result != 0) {
    printf("Failed to connect MQTT client (error code %d)\n", result);
    LedWhite = 1;
    ThisThread::sleep_for(1000ms);
    LedWhite = 0;
  } else {
    printf("Connected to the MQTT client\n");
    ledYellow = 1;
    ThisThread::sleep_for(1000ms);
    ledYellow = 0;
  }
    
    //getMicThread.start(callback(getMicSound));

    while (i < 30) {
    i += 1;
    //printf("%s", buffer);
    message.payload = (void*)buffer;
    message.payloadlen = 64;
    sprintf(buffer, "sound 12 bit");
    printf("%s", buffer);
    client.publish(MBED_CONF_APP_MQTT_TOPIC, message);
    
    ThisThread::sleep_for(2000ms);
    
    }
    
    printf("MQTT connection disconnected");
    ThisThread::sleep_for(2000ms);
    client.disconnect();






*/


/*

void pubMQTT(ESP8266Interface *esp) {

    MQTTClient client(&socket);

    // Use with IP
    // SocketAddress MQTTBroker(MBED_CONF_APP_MQTT_BROKER_IP,
    // MBED_CONF_APP_MQTT_BROKER_PORT);

    // Use with DNS
    nsapi_error_t result = esp->gethostbyname(MBED_CONF_APP_MQTT_BROKER_HOSTNAME, &MQTTBroker, NSAPI_IPv4, "esp");
    if (result != NSAPI_ERROR_OK) {
      printf("Failed to get MQTT broker IP address (error code %d)\n", result);
    } else {
      printf("MQTT broker IP archived\n");
    }

    MQTTBroker.set_port(MBED_CONF_APP_MQTT_BROKER_PORT);

    MQTTPacket_connectData data = MQTTPacket_connectData_initializer;
    data.MQTTVersion = 3;
    char *id = MBED_CONF_APP_MQTT_ID;
    data.clientID.cstring = id;

    
    char buffer[64];

    sprintf(buffer, "%s", volume);

    MQTT::Message msg;
    msg.qos = MQTT::QOS0;
    msg.retained = false;
    msg.dup = false;
    msg.payload = (void *)buffer;
    msg.payloadlen = 64;
    
    result = socket.open(esp);
    if (result != NSAPI_ERROR_OK) {
      printf("Failed to open socket(error code %d)\n", result);
      LedWhite = 1;
      ThisThread::sleep_for(1000ms);
      LedWhite = 0;
    } else {
      printf("Socket is open\n");
      ledYellow = 1;
      ThisThread::sleep_for(1000ms);
      ledYellow = 0;
    }
    ThisThread::sleep_for(100ms);
    result = socket.connect(MQTTBroker);
    if (result != NSAPI_ERROR_OK) {
      printf("Failed to connect to MQTT broker (error code %d)\n", result);
      LedWhite = 1;
      ThisThread::sleep_for(1000ms);
      LedWhite = 0;
    } else {
      printf("Connected to the MQTT broker\n");
      ledYellow = 1;
      ThisThread::sleep_for(1000ms);
      ledYellow = 0;
    }
    ThisThread::sleep_for(100ms);
    result = client.connect(data);
    if (result != 0) {
      printf("Failed to connect MQTT client (error code %d)\n", result);
      LedWhite = 1;
      ThisThread::sleep_for(1000ms);
      LedWhite = 0;
    } else {
      printf("Connected to the MQTT client\n");
      ledYellow = 1;
      ThisThread::sleep_for(1000ms);
      ledYellow = 0;
    }
    
    client.publish(MBED_CONF_APP_MQTT_TOPIC, msg);
    printf("This was sent to the MQTT broker: %s\n", buffer);
    
    // client.yield(100);
    client.disconnect();
    socket.close();
    ThisThread::sleep_for(2000ms);



printf("\nConnecting wifi..\n");

  int ret = esp.connect(MBED_CONF_APP_WIFI_SSID, MBED_CONF_APP_WIFI_PASSWORD,NSAPI_SECURITY_WPA_WPA2);
  if (ret != 0) {
    printf("\nConnection error\n");
    LedRed = 1;
    ThisThread::sleep_for(1000ms);
    LedRed = 0;
    connected = false;
  } else {
    printf("\nConnection success\n");
    connected = true;
    LedGreen = 1;
    ThisThread::sleep_for(1000ms);
    LedGreen = 0;
    int getip = esp.get_ip_address(&deviceIP);
    printf("IP via DHCP: %s\n", deviceIP.get_ip_address());
  }



*/








     